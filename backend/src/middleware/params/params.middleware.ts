import { Injectable, NestMiddleware } from '@nestjs/common';
import { ParamsService } from './params.service';
import checkHash from 'tgwa-params-checker';
import { UserDataDto } from 'src/dto/user-data.dto';
import * as TelegramBot from 'node-telegram-bot-api';
import Errors from 'src/errors.enum';
import * as dotenv from 'dotenv';

dotenv.config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è

@Injectable()
export class ParamsMiddleware implements NestMiddleware {
  constructor(private readonly paramsService: ParamsService) {}

  async use(req: any, res: any, next: () => void) {
    const authorizationToken = req?.headers?.authorization?.slice(7) || '';

    // üî• –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    console.log("üîç [DEBUG] Authorization Token:", authorizationToken);
    console.log("üîç [DEBUG] BOT_TOKEN –∏–∑ process.env:", process.env.BOT_TOKEN);
    console.log("üîç [DEBUG] AUTHORIZATION_LIFETIME:", process.env.AUTHORIZATION_LIFETIME);

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω BOT_TOKEN
    if (!process.env.BOT_TOKEN || process.env.BOT_TOKEN.length < 40) {
      console.error("‚ùå [ERROR] BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π! –ü—Ä–æ–≤–µ—Ä—å .env");
      return res.status(500).json({
        status: false,
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π",
      });
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ authorizationToken
    if (!authorizationToken) {
      console.error("‚ùå [ERROR] Authorization Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!");
      return res.status(401).json({
        status: false,
        message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: Authorization Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
      });
    }

    // üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    try {
      const isValid = checkHash(
        authorizationToken,
        process.env.BOT_TOKEN,
        +process.env.AUTHORIZATION_LIFETIME || 0
      );

      if (!isValid) {
        console.error("‚ùå [ERROR] checkHash() –≤–µ—Ä–Ω—É–ª false! –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!");
        return res.status(401).json({
          status: false,
          message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω",
        });
      }

      // ‚úÖ –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º userData
      const userDataRaw = decodeURIComponent(authorizationToken)
        .split('&')
        .find((el) => el.includes('user='));

      if (!userDataRaw) {
        console.error("‚ùå [ERROR] userData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Authorization Token!");
        return res.status(401).json({
          status: false,
          message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
        });
      }

      const userData = JSON.parse(userDataRaw.slice(5));
      console.log("‚úÖ [INFO] User Data:", userData);

      const user: UserDataDto = await this.paramsService.getUser(userData);

      if (!user) {
        console.error("‚ùå [ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!");
        return res.status(401).json({
          status: false,
          message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }

      if (user.is_banned) {
        console.error(`‚ùå [ERROR] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!`);
        const bot = new TelegramBot(process.env.BOT_TOKEN);

        await bot.sendMessage(
          user.user_id,
          `–î–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É <b>–∑–∞–∫—Ä—ã—Ç</b>. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`,
          { parse_mode: 'HTML' }
        );

        return res.status(401).json({
          status: false,
          message: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
        });
      }

      req.headers = { ...req.headers, user };
      console.log("‚úÖ [INFO] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!");
      next();
    } catch (error) {
      console.error("‚ùå [ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error);
      return res.status(500).json({
        status: false,
        message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
      });
    }
  }
}
